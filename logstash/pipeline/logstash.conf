input {
  beats {
    port => 5044 # Filebeat에서 전송받는 포트
  }
  tcp {
    port => 5050 # 애플리케이션이 직접 전송할 수 있는 포트 (필요시)
  }
}

filter {
  # 이벤트/에러 로그 처리 (Filebeat에서 받은 데이터 기준)
  if [log_type] == "event" or [log_type] == "error" {
      # 타임스탬프 파싱
      if [@timestamp] {
        date {
          match => [ "@timestamp", "ISO8601" ]
          target => "@timestamp"
        }
      }

      # 숫자 필드 변환
      mutate {
        convert => {
          "kafka_partition" => "integer"
          "kafka_offset" => "integer"
        }
      }

      # 구매 이벤트 특별 처리
      if [event_type] == "purchase" {
          if [cart_item_ids] {
            mutate {
                convert => { "cart_item_ids" => "string" }
            }
          }
          if [purchase_item_ids] {
            mutate{
                convert => { "purchase_item_ids" => "string" }
            }
          }

          # 고객 분석을 위한 필드 정리
          mutate {
            # 분석용 인덱스 설정
            add_field => {
              "[@metadata][index_name]" => "purchase-events-%{+YYYY.MM.dd}"
            }
          }

        # 피부 타입 분석용 필드 정리
          if [skin_type] and [skin_type] != "" {
            # 피부 타입 정규화 (예: 건성, 지성, 복합성 등)
            mutate {
              lowercase => [ "skin_type" ]
            }
          }

          # 개인화 타입 분석
          if [personal_type] and [personal_type] != "" {
            mutate {
              lowercase => [ "personal_type" ]
            }
          }

        # 성별/연령대/지역 기반 세그먼트 생성 (분석용)
        if [birth] and [birth] != "" {
            ruby {
              code => "
                begin
                  birth_year = event.get('birth')[0,4].to_i
                  current_year = Time.now.year
                  age = current_year - birth_year

                  case age
                  when 0..19
                    event.set('age_group', '10대')
                  when 20..29
                    event.set('age_group', '20대')
                  when 30..39
                    event.set('age_group', '30대')
                  when 40..49
                    event.set('age_group', '40대')
                  when 50..59
                    event.set('age_group', '50대')
                  else
                    event.set('age_group', '60대+')
                  end
                rescue
                  event.set('age_group', 'unknown')
                end
              "
            }
          }

          # 고객 세그먼트 생성
          if [gender] and [area] and [age_group] {
            mutate {
              add_field => { "customer_segment" => "%{gender}_%{age_group}_%{area}" }
            }
          }

          # event_date timestamp 처리 (Long 타입)
          if [event_date] and [event_date] != "" {
            mutate{
              convert => { "event_date" => "string" }
            }
            date {
              match => [ "event_date", "UNIX_MS" ]
              target => "event_date"
            }
          }
      }

      # 조회 이벤트 처리
      if [event_type] == "view" {
        # item_id와 sub_category 숫자 변환 (필요한 경우)
        if [item_id] {
          mutate {
            convert => { "item_id" => "integer" }
          }
        }

        # event_date timestamp 처리 (Long 타입)
        if [event_date] and [event_date] != "" {
          mutate{
            convert => { "event_date" => "string" }
          }
          date {
            match => [ "event_date", "UNIX_MS" ]
            target => "event_date"
          }
        }

        # 상품 카테고리별 분석을 위한 필드 정리
        mutate {
          add_field => {
            "[@metadata][index_name]" => "view-events-%{+YYYY.MM.dd}"
          }
        }

        # 시간대별 조회 패턴 분석 (view_date 기준)
        if [actual_view_time] {
          ruby {
            code => "
              begin
                view_time = event.get('actual_view_time')
                hour = view_time.hour

                case hour
                when 6..11
                  event.set('time_segment', '오전')
                when 12..17
                  event.set('time_segment', '오후')
                when 18..23
                  event.set('time_segment', '저녁')
                else
                  event.set('time_segment', '새벽')
                end

                # 요일 정보도 추가
                event.set('day_of_week', view_time.strftime('%A'))
                event.set('is_weekend', ['Saturday', 'Sunday'].include?(view_time.strftime('%A')))
              rescue
                event.set('time_segment', 'unknown')
              end
            "
          }
        }
      }

      # 장바구니 이벤트 처리
      if [event_type] == "cart" {
          # item_id 숫자 변환
          if [item_id] {
            mutate {
              convert => { "item_id" => "integer" }
            }
          }

          # 장바구니 분석을 위한 필드 정리
          mutate {
            add_field => {
              "[@metadata][index_name]" => "cart-events-%{+YYYY.MM.dd}"
            }
          }

          # 성별/연령대/지역 기반 세그먼트 생성 (분석용)
          if [birth] and [birth] != "" {
            ruby {
              code => "
                begin
                  birth_year = event.get('birth')[0,4].to_i
                  current_year = Time.now.year
                  age = current_year - birth_year

                  case age
                  when 0..19
                    event.set('age_group', '10대')
                  when 20..29
                    event.set('age_group', '20대')
                  when 30..39
                    event.set('age_group', '30대')
                  when 40..49
                    event.set('age_group', '40대')
                  when 50..59
                    event.set('age_group', '50대')
                  else
                    event.set('age_group', '60대+')
                  end
                rescue
                  event.set('age_group', 'unknown')
                end
              "
            }
          }

          # 고객 세그먼트 생성
          if [gender] and [area] and [age_group] {
            mutate {
              add_field => { "customer_segment" => "%{gender}_%{age_group}_%{area}" }
            }
          }

          # 피부 타입 분석용 필드 정리
          if [skin_type] and [skin_type] != "" {
            # 피부 타입 정규화 (예: 건성, 지성, 복합성 등)
            mutate {
              lowercase => [ "skin_type" ]
            }
          }

          # 피부 고민 분석용 필드 정리
           if [skin_issues] and [skin_issues] != "" {
             ruby {
               code => "
                 begin
                   skin_issues = event.get('skin_issues')
                   if skin_issues.is_a?(Array)
                     event.set('skin_issues_count', skin_issues.length)
                   else
                     event.set('skin_issues_count', 0)
                   end
                 rescue => e
                   event.set('skin_issues_count', 0)
                 end
               "
             }
           }

          # 개인화 타입 분석
          if [personal_type] and [personal_type] != "" {
            mutate {
              lowercase => [ "personal_type" ]
            }
          }

          # event_date timestamp 처리 (Long 타입)
          if [event_date] and [event_date] != "" {
            mutate{
              convert => { "event_date" => "string" }
            }
            date {
              match => [ "event_date", "UNIX_MS" ]
              target => "event_date"
            }
          }
      }


      # 에러 로그 처리
      if [log_type] == "error" {
        # 에러 심각도 분류
        if [error_class] {
          if [error_class] in ["NullPointerException", "ArrayIndexOutOfBoundsException"] {
            mutate { add_field => { "error_severity" => "critical" } }
          } else if [error_class] in ["JsonProcessingException", "IOException"] {
            mutate { add_field => { "error_severity" => "warning" } }
          } else {
            mutate { add_field => { "error_severity" => "normal" } }
          }
        }

        # 에러별 인덱스 설정 - Filebeat 필드를 기반으로 판단
        if [event_type] == "purchase_error" {
          mutate {
            add_field => {
              "[@metadata][index_name]" => "purchase-errors-%{+YYYY.MM.dd}"
              "alert_required" => "true"
            }
          }
        } else if [event_type] == "view_error" {
          mutate {
            add_field => {
              "[@metadata][index_name]" => "view-errors-%{+YYYY.MM.dd}"
              "alert_required" => "false"
              "service_name" => "view-service"
            }
          }
        }
      }

      # 불필요한 필드 제거
      mutate {
        remove_field => [ "host", "agent", "input", "ecs", "environment",
        "kafka_key", "kafka_partition", "kafka_offset","@version","log_type",
         "log","tags"]
      }
  }
}

output {
  # 이벤트/에러 로그 처리
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index_name]}"

    # 템플릿 설정
    manage_template => true
    template_name => "event-logs"
  }
}