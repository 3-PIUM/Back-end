input {
  beats {
    port => 5044 # Beats의 기본 포트
  }
  tcp {
    port => 5050 # 애플리케이션이 직접 전송할 수 있는 포트
  }
}

filter {
  # Spring Boot 로그만 처리하는 조건부 필터
  if [fields][logtype] == "spring-boot" {
    # Grok 패턴을 사용한 Spring Boot 로그 파싱
    grok {
      # Spring Boot 표준 로그 형식 매칭
      # 예시: 2025-06-17 10:30:45.123 INFO 12345 --- [main] com.example.Application : Application started
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:level}\s+---\s+\[%{DATA:thread}\]\s+%{DATA:class}\s+:\s+%{GREEDYDATA:logmessage}"
      }
    }
    # 파싱된 timestamp를 Elasticsearch의 @timestamp 필드로 설정
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "spring-boot-logs-%{+YYYY.MM.dd}"
  }

  # 디버깅용 콘솔 출력 (개발/테스트 환경에서 유용)
  stdout {
    codec => rubydebug  # 구조화된 형태로 출력
  }
}